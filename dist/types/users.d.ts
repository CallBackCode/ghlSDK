type PermissionsDTO = {
    campaignsEnabled?: boolean;
    campaignsReadOnly?: boolean;
    contactsEnabled?: boolean;
    workflowsEnabled?: boolean;
    workflowsReadOnly?: boolean;
    triggersEnabled?: boolean;
    funnelsEnabled?: boolean;
    websitesEnabled?: boolean;
    opportunitiesEnabled?: boolean;
    dashboardStatsEnabled?: boolean;
    bulkRequestsEnabled?: boolean;
    appointmentsEnabled?: boolean;
    reviewsEnabled?: boolean;
    onlineListingsEnabled?: boolean;
    phoneCallEnabled?: boolean;
    conversationsEnabled?: boolean;
    assignedDataOnly?: boolean;
    adwordsReportingEnabled?: boolean;
    membershipEnabled?: boolean;
    facebookAdsReportingEnabled?: boolean;
    attributionsReportingEnabled?: boolean;
    settingsEnabled?: boolean;
    tagsEnabled?: boolean;
    leadValueEnabled?: boolean;
    marketingEnabled?: boolean;
    agentReportingEnabled?: boolean;
    botService?: boolean;
    socialPlanner?: boolean;
    bloggingEnabled?: boolean;
    invoiceEnabled?: boolean;
    affiliateManagerEnabled?: boolean;
    contentAiEnabled?: boolean;
    refundsEnabled?: boolean;
    recordPaymentEnabled?: boolean;
    cancelSubscriptionEnabled?: boolean;
    paymentsEnabled?: boolean;
    communitiesEnabled?: boolean;
    exportPaymentsEnabled?: boolean;
};
type UserRoleOptions = "admin" | "user";
type UserTypeOptions = "account" | "agency";
type RoleSchema = {
    type?: UserTypeOptions;
    role?: UserRoleOptions;
    locationIds?: string[];
    restrictSubAccount?: boolean;
};
type UserScopes = "campaigns.readonly" | "campaigns.write" | "calendars/events.write" | "calendars/events.readonly" | "contacts.write" | "contacts/bulkActions.write" | "workflows.readonly" | "workflows.write" | "triggers.write" | "funnels.write" | "websites.write" | "medias.write" | "medias.readonly" | "opportunities.write" | "opportunities/leadValue.readonly" | "reporting/phone.readonly" | "reporting/adwords.readonly" | "reporting/facebookAds.readonly" | "reporting/attributions.readonly" | "reporting/agent.write" | "reporting/agent.readonly" | "reporting/reports.write" | "reporting/reports.readonly" | "payments.write" | "payments/refunds.write" | "payments/records.write" | "payments/exports.write" | "payments/subscriptionsCancel.write" | "invoices.write" | "invoices.readonly" | "invoices/schedule.readonly" | "invoices/schedule.write" | "invoices/template.readonly" | "invoices/template.write" | "reputation/review.write" | "reputation/listing.write" | "conversations.write" | "conversations.readonly" | "conversations/message.readonly" | "conversations/message.write" | "contentAI.write" | "dashboard/stats.readonly" | "locations/tags.write" | "locations/tags.readonly" | "marketing.write" | "eliza.write" | "settings.write" | "socialplanner/post.write" | "marketing/affiliate.write" | "blogs.write" | "membership.write" | "communities.write" | "certificates.write" | "certificates.readonly" | "adPublishing.write" | "adPublishing.readonly" | "private-integration-location.readonly" | "private-integration-location.write" | "private-integration-company.readonly" | "private-integration-company.write" | "native-integrations.readonly" | "native-integrations.write" | "wordpress.write" | "wordpress.read" | "custom-menu-link.readonly" | "custom-menu-link.write";
type UsersSchema = {
    id?: string;
    name?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    extension?: string;
    permissions?: PermissionsDTO;
    scopes?: UserScopes;
    roles?: RoleSchema;
    deleted?: boolean;
};
export type UsersSearchResponseDTO = {
    users: UsersSchema[];
    count: number;
};
export type UsersGetResponseDTO = {
    users: UsersSchema[];
};
export type UsersResponseDTO = UsersSchema;
export type UsersCreateDTO = {
    companyId: string;
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    phone?: string;
    type: string;
    role: string;
    isEjectedUser: boolean;
    locationIds: string[];
    permissions?: PermissionsDTO;
    scopes?: UserScopes;
    scopesAssignedToOnly?: UserScopes;
    profilePhoto?: string;
};
export type UsersUpdateDTO = {
    isEjectedUser: boolean;
    firstName?: string;
    lastName?: string;
    email?: string;
    emailChangeOTP?: string;
    password?: string;
    phone?: string;
    type?: string;
    role?: string;
    companyId?: string;
    locationIds?: string[];
    permissions?: PermissionsDTO;
    scopes?: UserScopes;
    scopesAssignedToOnly?: UserScopes;
    profilePhoto?: string;
};
export type UsersDeleteDTO = {
    succeeded: boolean;
    message: string;
};
export type UsersSearchOptions = {
    companyId: string;
    ids?: string;
    enabled2waySync?: boolean;
    limit?: string;
    locationId?: string;
    query?: string;
    role?: UserRoleOptions;
    skip?: string;
    sort?: string;
    sortDirection?: string;
    type?: UserTypeOptions;
};
export type UsersSearchParams = {
    companyId: string;
    ids?: string;
    enabled2waySync?: string;
    limit?: string;
    locationId?: string;
    query?: string;
    role?: string;
    skip?: string;
    sort?: string;
    sortDirection?: string;
    type?: string;
};
export {};
