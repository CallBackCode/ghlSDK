export declare const messages: {
    get: (messageId: import("../../../types/conversations").ConversationGetMessageResponseDTO["id"], authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationGetMessageResponseDTO) | null>;
    search: (conversationId: string, options: {
        lastMessageId?: string;
        limit?: number;
        type?: string;
    }, authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationGetMessagesByResponseDTO) | null>;
    send: (options: import("../../../types/conversations").ConversationSendMessageBodyDTO, authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationSendMessageResponseDTO) | null>;
    addInbound: (options: import("../../../types/conversations").ConversationProcessMessageBodyDTO, authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationProcessMessageResponseDto) | null>;
    addExternalOutboundCall: (options: import("../../../types/conversations").ConversationProcessOutboundMessageBodyDTO, authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationProcessMessageResponseDto) | null>;
    cancelScheduled: (messageId: import("../../../types/conversations").ConversationGetMessageResponseDTO["id"], authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationCancelScheduledResponseDTO) | null>;
    uploadFileAttachments: (options: import("../../../types/conversations").ConversationUploadFilesDTO, authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationUploadFilesResponseDTO | import("../../../types/conversations").ConversationUploadFilesErrorResponseDto) | null>;
    updateStatus: (messageId: import("../../../types/conversations").ConversationGetMessageResponseDTO["id"], options: import("../../../types/conversations").ConversationUpdateMessageStatusDTO, authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConversationSendMessageResponseDTO) | null>;
    getTranscript: (locationId: string, messageId: import("../../../types/conversations").ConversationGetMessageResponseDTO["id"], authToken: string) => Promise<(import("../../../types/_global").BadRequestDTO | import("../../../types/_global").UnauthorizedDTO | import("../../../types/_global").UnprocessableDTO | import("../../../types/conversations").ConverstationGetMessageTranscriptionResponseDTO) | null>;
};
